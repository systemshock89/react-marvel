{"version":3,"file":"static/js/682.c31cade5.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    \r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n\r\n        // если картинка находится в папке public:\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch(process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>; // если грузятся НОВЫЕ элементы, то ничего не меняем на странице. Если нет - то это первая загрузка - покажем спиннер\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false); \n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setComicsEnded] = useState(false); \n\n    const {getAllComics, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);     \n        getAllComics(offset)\n            .then(onComicsListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n\n        let ended = false;\n        if(newComicsList.length < 8){\n            ended = true;\n        }\n\n        setComicsList([...comicsList, ...newComicsList]);\n        setNewItemLoading(false);\n        setOffset(offset + 8)\n        setComicsEnded(ended);\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                        <Link to={`/comics/${item.id}`}>\n                            <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                            <div className=\"comics__item-name\">{item.title}</div>\n                            <div className=\"comics__item-price\">{item.price}</div>\n                        </Link>\n                </li>\n            )\n        });\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    return (\n        <div className=\"comics__list\">\n            {setContent(process, () => renderItems(comicsList), newItemLoading)}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading} \n                style={{'display': comicsEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import {Helmet} from 'react-helmet';\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst ComicsPage = () => {\r\n    return(\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                name=\"description\"\r\n                content=\"Page with list of our comics\"\r\n                />\r\n                <title>Comics page</title>\r\n            </Helmet>        \r\n            <AppBanner/>\r\n            <ComicsList/>        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import { useState, useCallback } from \"react\";\r\n\r\n// хук позволяет отправлять запросы, обрабатывать р-ты и сохранять локальные состояния\r\nexport const useHttp = () => {\r\n    // перешли на конечный автомат, поэтому loading и error не нужны\r\n    // const [loading, setLoading] = useState(false); \r\n    // const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting'); // Текущее состояние компонента (по умолчанию ожидание какого-то действия)\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type' : 'application/json'}) => {\r\n        \r\n        // setLoading(true); // запускается при первичной загрузке первых 9 персов\r\n        setProcess('loading'); // меняем состояние компонента в течение действия нашего запроса\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`); // объект ошибки\r\n                // оператор throw выкидывает новую ошибку\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            // setLoading(false);\r\n            \r\n            // setProcess('confirmed'); // состояние компонента, когда запрос завершен\r\n            // Установка состояния confirmed здесь будет приводить к ошибке, тк здесь асинхронные ф-ции и данные еще не будет сформированы.\r\n            // нужно прокинуть setProcess в Charinfo и установить confirmed там\r\n\r\n            return data;\r\n        } catch(e) {\r\n            // setLoading(false);\r\n            // setError(e.message);\r\n            setProcess('error'); // состояние компонента, когда произошла ошибка\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    // ф-я чистит ошибки (вместо  setError(e.message) в catch() ставит null)\r\n    const clearError = useCallback(() => {\r\n        // setError(null);\r\n        setProcess('loading'); // при очистке ошибки ставим процесс в loading\r\n    }, []);\r\n\r\n    // return {loading, request, error, clearError, process, setProcess}\r\n    return {request, clearError, process, setProcess}\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\n// файл MarvelService.js не будет переименовывать, тк это специализированный компонент, где раньше был класс, переписанный на хук\r\n// а вот к самому хуку добавим use\r\nconst useMarvelService = () => {\r\n    // const {loading, request, error, clearError, process, setProcess} = useHttp();\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'; // пер-я начинается с подчеркивания - говорит о том, что это запрещено изменять\r\n    const _apiKey = 'apikey=a69aadd3cee4bd52ac851e95515c1aaa';\r\n    const _baseOffset = 210; // начнем с персонажа №210 тк вначале мало информации в персах\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter); // вернем массив с объектами, кот-е нужны\r\n    }\r\n\r\n    // Вариант модификации готового метода для поиска по имени.\r\n\t// Вызывать его можно вот так: getAllCharacters(null, name)\r\n\r\n\t// const getAllCharacters = async (offset = _baseOffset, name = '') => {\r\n\t//     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\r\n\t//     return res.data.results.map(_transformCharacter);\r\n\t// }\r\n\r\n\t// Или можно создать отдельный метод для поиска по имени\r\n    // в API можно отсортировать персов по имени (пар-р name).\r\n    // в р-те получим массив, из кот-го берем первый элемент - нужный нам перс\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n    const getCharacter = async (id) => { // т.к getResource выполняется ассинхронно, то чтоб получить пер-ю res нужно подождать, добавив async await\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics); \r\n    }  \r\n\r\n    const getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    // метод получает большой объект с данными, а отдает только те, кот-е нам нужны\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    };\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            price: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n        }\r\n    };\r\n\r\n    return {\r\n            // loading, \r\n            // error, \r\n            clearError, \r\n            process,\r\n            setProcess,\r\n            getAllCharacters, \r\n            getCharacterByName,\r\n            getCharacter, \r\n            getAllComics, \r\n            getComic,\r\n        };\r\n}\r\n\r\nexport default useMarvelService;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorMessage","style","display","width","height","objectFit","margin","img","setContent","process","Component","newItemLoading","Spinner","Error","ComicsList","comicsList","setComicsList","useState","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","getAllComics","setProcess","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","arr","items","map","item","i","Link","to","concat","id","thumbnail","title","price","renderItems","disabled","onClick","ComicsPage","_Fragment","Helmet","name","content","request","clearError","useHttp","useCallback","async","url","method","arguments","undefined","body","headers","response","fetch","ok","status","json","e","_apiBase","_apiKey","_transformCharacter","char","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","pageCount","prices","getAllCharacters","data","results","getCharacterByName","getCharacter","res","getComic"],"sourceRoot":""}