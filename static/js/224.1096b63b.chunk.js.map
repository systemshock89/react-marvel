{"version":3,"file":"static/js/224.1096b63b.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    \r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n\r\n        // если картинка находится в папке public:\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useEffect, useState } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n        // eslint-disable-next-line\n    }, [])\n \n    // когда персонаж загрузился\n    const onCharLoaded = (char) => {\n        setChar(char); // char: char\n    }\n\n    const updateChar = () => {\n\n        // если запрос вызвал ошибку, то по следующему нажатию на кнопку \"Try it\" подгрузить нового перса не получится, тк появилась js ошибка\n        // Чтобы этого не произошло, нужно перед каждым новым запросом чистить ошибку\n        clearError();\n\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000); // создадим случайное число в определенном промежутке и округлим его\n        // example 1011005\n        \n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    // если необходимо несколько вещей отображать в зависимости от состояний:\n    // const errorMessage = error ?  <ErrorMessage/> : null;\n    // const spinner = loading ? <Spinner/> : null;\n    // const content = !(loading || error) ? <View char={char} /> : null; // контент помещается на страницу тогда, когда нет загрузки, но при этом нет ошибки\n\n    return (\n        <div className=\"randomchar\">\n\n            {setContent(process, View, char)}\n            {/* {errorMessage} */}\n            {/* {spinner} */}\n            {/* {content} */}\n            {/* {loading ? <Spinner/> : <View char={char} />} */}\n\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\n// простой рендерящий компонент\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return(\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\n// в этом компоненте особенная логика у setContent:\n// исп-ся newItemLoading\n// поэтому напишем здесь свою.\n// Обычная ф-я setContent сломает пагинацию\nconst setContent = (process, Component, newItemLoading) => {\n    switch(process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>; // если грузятся НОВЫЕ элементы, то ничего не меняем на странице. Если нет - то это первая загрузка - покажем спиннер\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false); // запускается во время загрузки новых эл-тов после клика \"показать еще\"\n    const [offset, setOffset] = useState(210); // каждый раз когда завершен запрос на сервер увеличивает отступ на 9 персонажей (можно вставить большое число и потестировать ситуацию, когда закончились персонажи)\n    const [charEnded, setCharEnded] = useState(false); // если закончились персонажи\n\n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => { // useEffect запускается после рендера, поэтому в этом случае мы можем исп-ть стрелочную ф-ю выше, чем она объявлена\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, [])\n\n    // запрос на сервер\n    const onRequest = (offset, initial) => {\n        // initial: true - первичная загрузка\n        // initial: false - повторная загрузка по нажатию кнопки \"показать еще\"\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);     \n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    // когда персонажи загрузились получаем новые данные, из которых будем формировать новое состояние\n    // если мы первый раз запускаем этот метод, то в ...charList пустой массив, кот-й ни во что не развернется\n    // и у нас будет только ...newCharList, кот-я развернется в новые эл-ты.\n    // В последующих запусках в ...charList будут старые эл-ты, а в ...newCharList новые.\n    // В итоге они будут складываться в один массив.\n    const onCharListLoaded = (newCharList) => {\n\n        /*\n        Ситауция - когда загрузились все персонажи и подгружать больше нечего.\n        При клике на кнопку \"загрузить еще\" не будет ошибки, тк бекэнд спроектирован правильно и пришлет пустой массив.\n        Но кнопку надо скрыть. Лучше стилями, тк если ее физически удалять, то компонент надо будет перерисовывать.\n\n        Здесь в логиге не реализован случай:\n        Когда последние 9 эл-то приходят, то кнопка будет удаляться.\n\n        Также не реализовано запоминание количества уже загруженных эл-тов на страницу\n        \n        Динамически вычислим, если длина нового массива < 9 и помещаем ended в state\n        */\n        let ended = false;\n        if(newCharList.length < 9){\n            ended = true;\n        }\n\n        // формируем не 9 персонажей, а подгружаем каждый раз еще по 9. state зависит от предыдущуего stat'а. \n        // Вовзращаем объект из ф-и setState и передаем charList, подвергнутый деструктуризации\n        setCharList([...charList, ...newCharList]); // разворачиваем старый массив charList и добавляем newCharList\n        // setLoading(loading => false);\n        setNewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended);\n\n        // this.setState({\n        //     charList, \n        //     loading: false, \n        //     newItemLoading: false\n        // }) \n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        key={item.id}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    // const items = renderItems(charList);\n\n    // const errorMessage = error ?  <ErrorMessage/> : null;\n    // const spinner = loading && !newItemLoading ? <Spinner/> : null; // есть загрузка, но не загрузка новых компонетов: \n    // тогда спиннер грузится только при первой загрузке страницы. А при нажатии \"показать еще\" спиннера уже нет\n\n    // починим баг: при первом клике по эл-ту из списка он не выделяется красным. При втором клике выделяется.\n    // это происходит из-за лишнего перерендера компонента CharList, кот-й вызывает повторный запуск ф-и setContent\n    // а класс активности для выделения красным должен был проставиться у старого компонента, а не у нового.\n    // для решения используем useMemo и перерендериваем ф-ю setContent только при изменении process\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line\n    }, [process])\n\n    return (\n        <div className=\"char__list\">\n\n            {elements}\n            {/* {setContent(process, () => renderItems(charList), newItemLoading)} */}\n            {/* Здесь нет компонента View. Вместо него есть ф-я renderItems(charList), кот-я возвращает кусочек верстки.\n             Ее и передадим в качетсве компонента (второй арг)  */}\n\n            {/* {errorMessage}\n            {spinner}\n            {items} */}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading} \n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired // чтобы была ф-я и чтобы пропс был передан\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const [char, setChar] = useState(null);\r\n\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar()\r\n        // eslint-disable-next-line\r\n    }, [props.charId])\r\n\r\n   const updateChar = () => {\r\n        clearError();\r\n        \r\n        // ориентируемся на пропсы\r\n        const {charId} = props;\r\n        if(!charId){\r\n            return;\r\n        }\r\n\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed')) // только тогда когда данные установятся в наш state - тогда установим процесс confirmed (состояние компонента, когда запрос завершен)\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n\r\n    // const skeleton = char || loading || error ? null : <Skeleton/> \r\n    // const errorMessage = error ?  <ErrorMessage/> : null;\r\n    // const spinner = loading ? <Spinner/> : null; // здесь два состояния у условий\r\n    // const content = !(loading || error || !char) ? <View char={char} /> : null; // не загрузка, не ошибка, но при этом есть персонаж\r\n    // а здесь 2 в третьей степени, т.е. 8 состояний\r\n    // Это усложняет восприятие. Антипаттерн\r\n    // поэтому используем ф-ю setContent, концепцию конечного автомата и состояния машины.\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {setContent(process, View, char)}\r\n\r\n            {/* {skeleton}\r\n            {errorMessage}\r\n            {spinner}\r\n            {content} */}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\r\n\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <div className=\"char__basics\">\r\n            <img src={thumbnail} alt={name} style={imgStyle}/>\r\n            <div>\r\n                <div className=\"char__info-name\">{name}</div>\r\n                <div className=\"char__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"char__descr\">\r\n            {description}\r\n        </div>\r\n        <div className=\"char__comics\">Comics:</div>\r\n        <ul className=\"char__comics-list\">\r\n            {comics.length > 0 ? null : 'Нет комиксов'}\r\n            {\r\n                comics.map((item, i) => {\r\n                    // eslint-disable-next-line\r\n                    if(i > 9) return; // если в массиве много эл-то, то этот способ даст просадки по производительности, тк будет проходится по всем ним\r\n                    // нужно переписывать на стандартный цикл с break. Но формировать новый массив, а не мутировать текущий\r\n    \r\n                    const comicId = item.resourceURI.match(/\\d+$/)[0];\r\n                    /**\r\n                     * регулярное выражение \\d+$ будет соответствовать последовательности цифр в конце строки.\r\n                     * Функция match() возвращает массив совпадений. \r\n                     * Поэтому мы берем первый элемент этого массива [0], который содержит найденное число.\r\n                     */\r\n\r\n                    return (\r\n                        \r\n                        <li key={i} className=\"char__comics-item\">\r\n                            <Link to={`/comics/${comicId}`}>{item.name}</Link>\r\n                        </li> \r\n                    )\r\n                })\r\n            }\r\n        </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number // обязательно число\r\n}\r\n\r\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik'; // переименуем ErrorMessage в FormikErrorMessage тк у нас уже есть компонент с таким именем\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed')) \r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    // const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;    \r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n \r\nexport default CharSearchForm;\r\n","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n        // компонет, кот-й был передан внутрь этого компонента\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport {Helmet} from 'react-helmet';\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null); // для поднятия состояния\r\n    \r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                name=\"description\"\r\n                content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>                \r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>              \r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>       \r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import { useState, useCallback } from \"react\";\r\n\r\n// хук позволяет отправлять запросы, обрабатывать р-ты и сохранять локальные состояния\r\nexport const useHttp = () => {\r\n    // перешли на конечный автомат, поэтому loading и error не нужны\r\n    // const [loading, setLoading] = useState(false); \r\n    // const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting'); // Текущее состояние компонента (по умолчанию ожидание какого-то действия)\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type' : 'application/json'}) => {\r\n        \r\n        // setLoading(true); // запускается при первичной загрузке первых 9 персов\r\n        setProcess('loading'); // меняем состояние компонента в течение действия нашего запроса\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`); // объект ошибки\r\n                // оператор throw выкидывает новую ошибку\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            // setLoading(false);\r\n            \r\n            // setProcess('confirmed'); // состояние компонента, когда запрос завершен\r\n            // Установка состояния confirmed здесь будет приводить к ошибке, тк здесь асинхронные ф-ции и данные еще не будет сформированы.\r\n            // нужно прокинуть setProcess в Charinfo и установить confirmed там\r\n\r\n            return data;\r\n        } catch(e) {\r\n            // setLoading(false);\r\n            // setError(e.message);\r\n            setProcess('error'); // состояние компонента, когда произошла ошибка\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    // ф-я чистит ошибки (вместо  setError(e.message) в catch() ставит null)\r\n    const clearError = useCallback(() => {\r\n        // setError(null);\r\n        setProcess('loading'); // при очистке ошибки ставим процесс в loading\r\n    }, []);\r\n\r\n    // return {loading, request, error, clearError, process, setProcess}\r\n    return {request, clearError, process, setProcess}\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\n// файл MarvelService.js не будет переименовывать, тк это специализированный компонент, где раньше был класс, переписанный на хук\r\n// а вот к самому хуку добавим use\r\nconst useMarvelService = () => {\r\n    // const {loading, request, error, clearError, process, setProcess} = useHttp();\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'; // пер-я начинается с подчеркивания - говорит о том, что это запрещено изменять\r\n    const _apiKey = 'apikey=a69aadd3cee4bd52ac851e95515c1aaa';\r\n    const _baseOffset = 210; // начнем с персонажа №210 тк вначале мало информации в персах\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter); // вернем массив с объектами, кот-е нужны\r\n    }\r\n\r\n    // Вариант модификации готового метода для поиска по имени.\r\n\t// Вызывать его можно вот так: getAllCharacters(null, name)\r\n\r\n\t// const getAllCharacters = async (offset = _baseOffset, name = '') => {\r\n\t//     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\r\n\t//     return res.data.results.map(_transformCharacter);\r\n\t// }\r\n\r\n\t// Или можно создать отдельный метод для поиска по имени\r\n    // в API можно отсортировать персов по имени (пар-р name).\r\n    // в р-те получим массив, из кот-го берем первый элемент - нужный нам перс\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n    const getCharacter = async (id) => { // т.к getResource выполняется ассинхронно, то чтоб получить пер-ю res нужно подождать, добавив async await\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics); \r\n    }  \r\n\r\n    const getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    // метод получает большой объект с данными, а отдает только те, кот-е нам нужны\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    };\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            price: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n        }\r\n    };\r\n\r\n    return {\r\n            // loading, \r\n            // error, \r\n            clearError, \r\n            process,\r\n            setProcess,\r\n            getAllCharacters, \r\n            getCharacterByName,\r\n            getCharacter, \r\n            getAllComics, \r\n            getComic,\r\n        };\r\n}\r\n\r\nexport default useMarvelService;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\n// в зависимости от меняющегося состояния внутри компонента - process можно делать какие-то действия\r\nconst setContent = (process, Component, data) => {\r\n    switch(process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data} />;\r\n        case 'error':\r\n            return <ErrorMessage/>\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","RandomChar","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","_Fragment","comicId","resourceURI","match","Link","to","concat","charId","CharSearchForm","getCharacterByName","errorMessage","results","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","Helmet","content","CharList","CharInfo","decoration","request","useHttp","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","status","json","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","title","pageCount","price","prices","res","getAllComics","getComic","Skeleton"],"sourceRoot":""}