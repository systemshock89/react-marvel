{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/pages/SinglePage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","request","clearError","process","setProcess","useState","useCallback","async","url","method","body","headers","response","fetch","ok","Error","status","json","e","useHttp","_apiBase","_apiKey","_transformCharacter","char","id","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","title","pageCount","price","prices","getAllCharacters","offset","data","results","map","getCharacterByName","getCharacter","res","getAllComics","getComic","Skeleton","className","setContent","Component","Spinner","AppBanner","avengers","avengersLogo","SinglePage","dataType","useParams","setData","useEffect","updateData","then","onDataLoaded"],"mappings":"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","file":"static/js/6.108b0e41.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    \r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n\r\n        // если картинка находится в папке public:\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"\" />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\n// файл MarvelService.js не будет переименовывать, тк это специализированный компонент, где раньше был класс, переписанный на хук\r\n// а вот к самому хуку добавим use\r\nconst useMarvelService = () => {\r\n    // const {loading, request, error, clearError, process, setProcess} = useHttp();\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/'; // пер-я начинается с подчеркивания - говорит о том, что это запрещено изменять\r\n    const _apiKey = 'apikey=a69aadd3cee4bd52ac851e95515c1aaa';\r\n    const _baseOffset = 210; // начнем с персонажа №210 тк вначале мало информации в персах\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter); // вернем массив с объектами, кот-е нужны\r\n    }\r\n\r\n    // Вариант модификации готового метода для поиска по имени.\r\n\t// Вызывать его можно вот так: getAllCharacters(null, name)\r\n\r\n\t// const getAllCharacters = async (offset = _baseOffset, name = '') => {\r\n\t//     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\r\n\t//     return res.data.results.map(_transformCharacter);\r\n\t// }\r\n\r\n\t// Или можно создать отдельный метод для поиска по имени\r\n    // в API можно отсортировать персов по имени (пар-р name).\r\n    // в р-те получим массив, из кот-го берем первый элемент - нужный нам перс\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n    const getCharacter = async (id) => { // т.к getResource выполняется ассинхронно, то чтоб получить пер-ю res нужно подождать, добавив async await\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics); \r\n    }  \r\n\r\n    const getComic = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n\t};\r\n\r\n    // метод получает большой объект с данными, а отдает только те, кот-е нам нужны\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    };\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            price: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n        }\r\n    };\r\n\r\n    return {\r\n            // loading, \r\n            // error, \r\n            clearError, \r\n            process,\r\n            setProcess,\r\n            getAllCharacters, \r\n            getCharacterByName,\r\n            getCharacter, \r\n            getAllComics, \r\n            getComic,\r\n        };\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\n// хук позволяет отправлять запросы, обрабатывать р-ты и сохранять локальные состояния\r\nexport const useHttp = () => {\r\n    // перешли на конечный автомат, поэтому loading и error не нужны\r\n    // const [loading, setLoading] = useState(false); \r\n    // const [error, setError] = useState(null);\r\n    const [process, setProcess] = useState('waiting'); // Текущее состояние компонента (по умолчанию ожидание какого-то действия)\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type' : 'application/json'}) => {\r\n        \r\n        // setLoading(true); // запускается при первичной загрузке первых 9 персов\r\n        setProcess('loading'); // меняем состояние компонента в течение действия нашего запроса\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`); // объект ошибки\r\n                // оператор throw выкидывает новую ошибку\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            // setLoading(false);\r\n            \r\n            // setProcess('confirmed'); // состояние компонента, когда запрос завершен\r\n            // Установка состояния confirmed здесь будет приводить к ошибке, тк здесь асинхронные ф-ции и данные еще не будет сформированы.\r\n            // нужно прокинуть setProcess в Charinfo и установить confirmed там\r\n\r\n            return data;\r\n        } catch(e) {\r\n            // setLoading(false);\r\n            // setError(e.message);\r\n            setProcess('error'); // состояние компонента, когда произошла ошибка\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    // ф-я чистит ошибки (вместо  setError(e.message) в catch() ставит null)\r\n    const clearError = useCallback(() => {\r\n        // setError(null);\r\n        setProcess('loading'); // при очистке ошибки ставим процесс в loading\r\n    }, []);\r\n\r\n    // return {loading, request, error, clearError, process, setProcess}\r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\n// в зависимости от меняющегося состояния внутри компонента - process можно делать какие-то действия\r\nconst setContent = (process, Component, data) => {\r\n    switch(process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data} />;\r\n        case 'error':\r\n            return <ErrorMessage/>\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst SinglePage = ({Component, dataType}) => {\r\n    const {id} = useParams();\r\n    const [data, setData] = useState(null); // объект со всеми данными об этом комиксе\r\n    const {getComic, getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateData()\r\n        // eslint-disable-next-line\r\n    }, [id])\r\n\r\n    const updateData = () => {\r\n        clearError();\r\n\r\n        switch (dataType) {\r\n            case 'comic':\r\n                getComic(id)\r\n                .then(onDataLoaded)\r\n                .then(() => setProcess('confirmed'));\r\n                break;\r\n            case 'character':\r\n                getCharacter(id)\r\n                .then(onDataLoaded)\r\n                .then(() => setProcess('confirmed'));\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    const onDataLoaded = (data) => {\r\n        setData(data);\r\n    }\r\n\r\n    // const errorMessage = error ?  <ErrorMessage/> : null;\r\n    // const spinner = loading ? <Spinner/> : null;\r\n    // const content = !(loading || error || !data) ? <Component data={data}/> : null; // не загрузка, не ошибка, но при этом есть персонаж\r\n\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            {setContent(process, Component, data)}\r\n            {/* {errorMessage}\r\n            {spinner}\r\n            {content} */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SinglePage;"],"sourceRoot":""}